#!/usr/bin/env python



###Imports
import sys
sys.path.append('/home/phao3/protobuf/protobuf-3.4.0/python')
import bank_pb2 as bank
import threading
from transport import send__message, read_message
import socket
import pdb # for debugging, use pdb.set_trace()
from select import select # for multiplexing
from time import sleep
import random


###Definitions
class Account(object):
    """ A wrapper around a mutex and an account balance
        It's thread safe!!!
        Attributes:
            _balance: (int) set to zero
            _lock: (Lock) used to lock around object
    """
    def __init__(self):
        self._balance = 0
        self._lock = threading.Lock()

    def get_balance(self):
        balance = self._balance
        return balance
    
    def set_balance(self, new_balance):
        self._balance = new_balance

    def lock(self):
        self._lock.acquire()

    def unlock(self):
        self._lock.release()


# my socket wrapper
class Channel(object):
    def __init__(self, socket, from_branch):
        self._channel_state = 0 # meaning empty
        self._recording = False
        self._socket = socket
        self._from_branch = from_branch # this is a string

    # overload "==" comparison
    def __eq__(self, other):
        return self._from_branch == other._from_branch

    def start_recording(self):
        self._recording = True
        self.clear()

    def stop_recording(self):
        self._recording = False

    def clear(self):
        self._channel_state = 0

    def mark_empty(self):
        # empty channel and no recording
        self.clear()
        self.stop_recording()
   
    def add_transfer(self,money):
        if self._recording:
           self._channel_state += money

    def get_state(self):
        return self._channel_state

    # wrapper method to be used by select
    def fileno(self):
        return self._socket.fileno()


        
###Globals

HOST_NAME = "remote.cs.binghamton.edu"
account = None # type: Account object
channels = []  # list of communication channels
port_number = None
branch_name = None
global_socket = None # this is the global socket for a branch
control_channel = None # the channel used to access messages from the controller
local_state = None # this is a bank.LocalSnapshot object



###Functions

def halt(msg):
    print(msg)
    sys.exit(1)


def init_branch():
    global control_channel
    global channels

    try:
        global_socket.bind((HOST_NAME, port_number))
    except socket.error:
        halt("init_branch: can't bind socket")

    #listen
    try:
        global_socket.listen(3)
    except socket.error:
        halt("init_branch: can't listen on socket")

    # get that first init message
    connection, _ = global_socket.accept()
    control_channel = Channel(connection, "controller")

    init_msg = read_message(control_channel._socket)
    assert(type(init_msg) == bank.InitBranch)
    # wait for a second message from control before starting
    start_msg = read_message(control_channel._socket)
    assert(type(start_msg) == bank.Marker)

    # set the balance
    account.lock()
    account.set_balance(init_msg.balance)
    account.unlock()
    branches = list(init_msg.all_branches)

    listen_list = [] # the branches that we listen for a connection from
    connect_list = [] # the branches that we actually initiate the connection to


    # remove ourselves from the list and see how many branches are to the left and right
    for i in range(len(branches)):
        if branches[i].name == branch_name:
            listen_list = branches[:i]
            connect_list = branches[i+1:]
            branches.pop(i)
            break
    # now setup connections to all other    

    # listen first
    for branch in listen_list:
        channel = connect_to_branch(branch, 'passive')
        channels.append(channel)

    # then connect
    # NOTE I used reversed to ensure that branches connect in the right order
    for branch in reversed(connect_list):
        channel = connect_to_branch(branch, 'active')
        channels.append(channel)

    channels = sorted(channels, key = lambda x: x._from_branch)







def connect_to_branch(branch, mode):
    """ branch is a bank.Branch object
        mode is a string either 'passive' or 'active'
        returns a new channel object
    """
    assert(type(branch) == bank.InitBranch.Branch)
    ip = branch.ip
    port = branch.port
    name = branch.name
    if mode == 'passive':
        connection, _ = global_socket.accept()
        return Channel(connection, name)


    elif mode == 'active':
        # NOTE connect even if we fail try again
        # never give up, never surrender
        while True:
            try:
                connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                connection.connect((ip,port))
            except socket.error:
                continue
            break
        return Channel(connection, name)
    else:
        raise ValueError("invalid mode :" + mode)
    

def receiver():
    global local_state

    while True:
        # added a time out so that the other thread cou
        readable = select(channels + [control_channel],  [], [],)[0]


        for channel in readable:
            if channel._from_branch == "controller":  # we got a message from the controller
                message = read_message(control_channel._socket)

                if type(message) == bank.InitSnapshot:
                    local_state = bank.ReturnSnapshot.LocalSnapshot()
                    local_state.snapshot_id = message.snapshot_id

                    # record account state
                    account.lock()
                    local_state.balance = account.get_balance()
                    account.unlock()

                    # send out marker messages
                    for c in channels:
                        send_marker(c, message.snapshot_id)

                    for c in channels:
                        c.start_recording()


                elif type(message) == bank.RetrieveSnapshot:
                    local_state.channel_state.extend([c.get_state() for c in channels])
                    return_snapshot = bank.ReturnSnapshot()
                    return_snapshot.local_snapshot.CopyFrom(local_state)
                    local_state = None
                    branch_msg = bank.BranchMessage()
                    branch_msg.return_snapshot.CopyFrom(return_snapshot)
                    send__message(control_channel._socket, branch_msg)

            else:
                message = read_message(channel._socket)

                # check if we got a Transfer message
                if type(message) == bank.Transfer:
                    account.lock()
                    balance = account.get_balance()
                    balance += message.money
                    channel.add_transfer(message.money) 
                    account.set_balance(balance)
                    account.unlock()

                elif type(message) == bank.Marker:
                    # If this is the first time we have seen a marker message
                    if local_state == None:
                        local_state = bank.ReturnSnapshot.LocalSnapshot()
                        local_state.snapshot_id = message.snapshot_id

                        #record account state
                        account.lock()
                        local_state.balance = account.get_balance()
                        channel.mark_empty()

                        #send marker messages to other channels
                        other_channels = list(filter(lambda x: x != channel, channels))
                        for c in other_channels:
                            c.start_recording()
                            send_marker(c, message.snapshot_id)

                        send_marker(channel, message.snapshot_id)
                        account.unlock()

                    # we have seen the marker message before, so cut off
                    else:
                        channel.stop_recording()
                
def send_marker(channel, snapshot_id):
    marker = bank.Marker()
    marker.snapshot_id = snapshot_id
    branch_msg = bank.BranchMessage()
    branch_msg.marker.CopyFrom(marker)
    send__message(channel._socket, branch_msg)
    
    
def sender():
    while True:
        # select a random channel to send to
        channel = channels[random.randint(0, len(channels) - 1)]

        #lock the account
        account.lock()

        percentage = random.randint(1,5) * 0.01

        balance = account.get_balance()
        withdrawl_ammount = int(balance * percentage)
        account.set_balance(balance - withdrawl_ammount)

        # construct the message to send to our channel of choice
        transfer = bank.Transfer()
        transfer.money = withdrawl_ammount
        branch_msg = bank.BranchMessage()
        branch_msg.transfer.CopyFrom(transfer)

        send__message(channel._socket, branch_msg)
        account.unlock()
        
        sleep_time = random.randint(0,5)
        sleep(sleep_time)


###Main
if __name__ == '__main__':
    #Init values
    account = Account()
    #Handle args
    if len(sys.argv) < 2:
        print("Usage: %s name port_num" %(sys.argv[0]))
        sys.exit(1)

    branch_name = sys.argv[1]
    port_number = int(sys.argv[2])

    global_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    init_branch()

    sender_thread = threading.Thread(target=sender, args=[])
    sender_thread.start()

    receiver()



