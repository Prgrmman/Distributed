#!/usr/bin/env python

import sys
sys.path.append('/home/phao3/protobuf/protobuf-3.4.0/python')
import bank_pb2 as bank
import re
import socket
import transport
import random

### globals
sockets = [] # this is a list of sockets to the various branches
# TODO instead of global sockets, have some wrapper so we can associate
#   each socket with a branch and the other branches

class Branch(object):
    """ This class is only so that I can wrap a socket, a branch name,
        and the channels that the branches should be using:
            this is important when retrieving a snapshot
    """
    def __init__(self):
        pass

### main body

def main(args):
    if len(args) < 2:
        print("Usage: %s initial_balance branch_file" %(args[0]))
        sys.exit(1)

    balance = int(args[1])
    branch_file = args[2]

    branches = []
    regex = r'(.*?)\s(.*?)\s(.*)'
    with open(branch_file, "r") as file:
        for line in file:
            matches = re.match(regex, line, re.M | re.I )

            branch = bank.InitBranch.Branch()
            branch.name = matches.group(1)
            branch.ip = matches.group(2).strip()
            branch.port = int(matches.group(3).strip())
            branches.append(branch)

    start_balance = balance // len(branches)

    for i in range(len(branches)):
        current_branch = branches[i]
        init_branch(current_branch, start_balance, branches)

    send_start()
    run_loop()
    

# init a branch with the other branches
def init_branch(branch, start_balance, branches):
    
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        s.connect((branch.ip, branch.port))
    except socket.error:
        print("Can't connect to %s" %(branch.name))
        sys.exit(1)

    sockets.append(s)

    init_branch = bank.InitBranch()
    init_branch.balance = start_balance

    # TODO is this correct?
    #init_branch.all_branches.add()
    init_branch.all_branches.extend(branches)

    branch_message = bank.BranchMessage()
    branch_message.init_branch.CopyFrom(init_branch)
    transport.send__message(s, branch_message)


# sends a dumby marker message to start on all sockets
# NOTE the sent maker message is ignored
def send_start():
    for socket in sockets:
        start_msg = bank.Marker()
        start_msg.snapshot_id = 1
        branch_message = bank.BranchMessage()
        branch_message.marker.CopyFrom(start_msg)
        transport.send__message(socket, branch_message)

def run_loop():
    """ This is the automated controller loop.
        It will start snapshots every 15 seconds, and wait 5 seconds for them to complete
        It chooses a random branch to send the start message too
    """
    init_snapshot()
    while True:
        pass


def init_snapshot():
    index = random.randint(0,len(sockets)-1)
    s = sockets[index]
    init_snapshot = bank.InitSnapshot()
    init_snapshot.snapshot_id = 1
    branch_message = bank.BranchMessage()
    branch_message.init_snapshot.CopyFrom(init_snapshot)
    transport.send__message(s, branch_message)
    



if __name__ == '__main__':
    main(sys.argv)
