#!/usr/bin/env python2

#NOTES
'''
Key's must in the range 0-255. If they are not, throw an error
'''

import glob
import sys
import logging
import os
import pdb
import threading
import time
logging.basicConfig(filename = '/dev/null')

sys.path.append('gen-py')
sys.path.insert(0, glob.glob('/home/yaoliu/src_code/local/lib/lib/python2.7/site-packages')[0])

from store import KeyValueStore
from store.ttypes import SystemException, Value

from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer

from util import read_node_file, halt, connection_from_node, Connection


### Definitions


class KeyValueStoreHandler:
    """
    This is the RPC class handler
    Attributes:
        - _data_store:

    """
    
    def __init__(self):
        self._data_store = 255 * [""] # array of empty strings
        self._lock = threading.Lock() # TODO is this needed?
        pass

    '''
    RPC calls:
        put_key     <- called by other replicas
        get_key     <- called by other replicas
        read        <- called by client
        write       <- called by client
    '''
    def read(self, key, level):
        print("read!")
        responses = read_all(key)
        response_count = len(responses)
        if response_count < level:
            raise SystemException("Read request could not reach enough nodes. %d node(s) responded"
                    %(response_count))

        if READ_REPAIR:
            read_repair(key)

        return self._data_store[key]

        
    
    def write(self, value, level):
        value.timestamp = time.time() # time stamp the value
        response_count = write_all(value)
        if response_count < level:
            raise SystemException("Write request could not reach enough nodes. %d node(s) responded"
                    %(response_count))

        self.local_write(value)

    def get_key(self, key, from_replica):
        print("get key!")
        return self._data_store[key]

    def put_key(self, value, from_replica):
        self.local_write(value)
        print("put_key!")

    '''
    Helper methods:
        local_write
        read_repair
    '''
    # TODO write this
    def read_repair(self, key):
        pass

    # write to your local data store
    def local_write(self, value):
        write_log(value)
        self._data_store[value.key] = value


### Globals
PORT_NUM = -1
NODE_NAME = ""
NODE_FILE = ""
HINTED_HANDOFF = False
READ_REPAIR = False
connection_dic = {} # dictionary of Connection objects


### Helper functions

def setup_connections(node_list):
    """ setup the dictionary of Connection objects
            node_list: (string) 
    """
    global connection_dic
    for node in node_list:
        connection_dic[node.name] = connection_from_node(node)

def write_all(value):
    """ writes to all replicas
        writes a value to all known connections
        returns number of successful writes
    """
    response_count = len(connection_dic)
    for key in connection_dic:
        connection = connection_dic[key]

        connection.lock()
        connection.open()
        try:
            connection.client.put_key(value, NODE_NAME)
        except:
            connection.mark_failed()
            if HINTED_HANDOFF:
                connection.add_hint(value)
            response_count -= 1
        connection.close()
        connection.unlock()

    return response_count


#TODO write this
def write_log(value):
    """ writes key to disk file
    """
    print(value)

def read_all(value_key):
    """ reads from all replicas
        returns a list of value objects
    """
    responses = []
    for key in connection_dic:
        connection = connection_dic[key]

        connection.lock()
        connection.open()
        try:
            response = connection.client.get_key(value_key, NODE_NAME)
            responses.append(response)
        except:
            connection.mark_failed()
        connection.close()
        connection.unlock()

    return responses
       


# prints out a usage message
def usage(prog_name):
    msg = "Usage: %s node_name node_file {--hinted-handoff | --read-repair}" % (prog_name)
    halt(msg)


###MAIN
def main(args):
    global NODE_NAME, NODE_FILE

    if len(args) != 4:
        usage(args[0])

    NODE_NAME = args[1]
    NODE_FILE = args[2]
    if args[3] == "--hinted-handoff": 
        HINTED_HANDOFF = True
    elif args[3] == "--read-repair": 
        READ_REPAIR = True
    else:
        halt("error, must give either --hinted-handoff or --read-repair")


    node_list = read_node_file(NODE_FILE)

    try:
        my_node = filter(lambda x: x.name == NODE_NAME, node_list)[0]
    except IndexError:
        halt("no such node name <%s> in file <%s>" %(NODE_NAME, NODE_FILE))

    print(my_node)
    PORT_NUM = my_node.port

    handler = KeyValueStoreHandler()
    processor = KeyValueStore.Processor(handler)
    transport = TSocket.TServerSocket(port=PORT_NUM)
    tfactory = TTransport.TBufferedTransportFactory()
    pfactory = TBinaryProtocol.TBinaryProtocolFactory()

    #NOTE we are using a threaded server for now
    server = TServer.TThreadedServer(processor, transport, tfactory, pfactory)
    #server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)

    node_list.remove(my_node)
    setup_connections(node_list)

    #connection.client.ping("poop")
    print("Starting the server")
    server.serve()

if __name__ == '__main__':
    main(sys.argv)

    
