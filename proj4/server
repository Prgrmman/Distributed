#!/usr/bin/env python2

import glob
import sys
sys.path.append('gen-py')
sys.path.insert(0, glob.glob('/home/yaoliu/src_code/local/lib/lib/python2.7/site-packages')[0])

from store import KeyValueStore
from store.ttypes import SystemException, Value

from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer

from util import read_node_file, halt


### Definitions

class KeyValueStoreHandler:
    """
    This is the RPC class handler

    """
    
    def __init__(self):
        pass

    '''
    RPC calls:
        put_key
        get_key
    '''
    def get_key(level):
        print("get key!")

    def put_key(value, level):
        print("put_key!")

    def heartbeat(from_replica):
        print("got heartbeat from %s" %(from_replica))


### Globals
PORT_NUM = -1
NODE_NAME = ""
NODE_FILE = ""
HINTED_HANDOFF = False
READ_REPAIR = False


### Helper functions

def test_connection():
    try:
        transport = TSocket.TSocket(my_node.ip, my_node.port)
        transport.open()
    except:
        halt("whoops")


# halt program with optional message

# prints out a usage message
def usage(prog_name):
    msg = "Usage: %s node_name node_file {--hinted-handoff | --read-repair}" % (prog_name)
    halt(msg)

###MAIN
def main(args):
    global NODE_NAME, NODE_FILE

    if len(args) != 4:
        usage(args[0])

    NODE_NAME = args[1]
    NODE_FILE = args[2]
    if args[3] == "--hinted-handoff": 
        HINTED_HANDOFF = True
    elif args[3] == "--read-repair": 
        READ_REPAIR = True
    else:
        halt("error, must give either --hinted-handoff or --read-repair")


    node_list = read_node_file(NODE_FILE)

    try:
        my_node = filter(lambda x: x.name == NODE_NAME, node_list)[0]
    except IndexError:
        halt("no such node name <%s> in file <%s>" %(NODE_NAME, NODE_FILE))

    print(my_node)
    PORT_NUM = my_node.port

    handler = KeyValueStoreHandler()
    processor = KeyValueStore.Processor(handler)
    transport = TSocket.TServerSocket(port=PORT_NUM)
    tfactory = TTransport.TBufferedTransportFactory()
    pfactory = TBinaryProtocol.TBinaryProtocolFactory()

    #NOTE we are using a threaded server for now
    server = TServer.TThreadedServer(processor, transport, tfactory, pfactory)
    #server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)

    # TODO do replaying of log here before starting the server

    #test_connection()

    print("Starting the server")
    server.serve()

if __name__ == '__main__':
    main(sys.argv)

    
