#!/usr/bin/env python2


import glob
import sys
import logging
import os
import pdb
import time
logging.basicConfig(filename = '/dev/null')

sys.path.append('gen-py')
sys.path.insert(0, glob.glob('/home/yaoliu/src_code/local/lib/lib/python2.7/site-packages')[0])

from store import KeyValueStore
from store.ttypes import SystemException, Value

from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer

# TODO remove this
#from util import read_node_file, halt, connection_from_node, Connection, value_from_string, async
from util import read_node_file, halt, connection_from_node, Connection, value_from_string
from sync import async, synchronize

from random import shuffle



### Definitions


class KeyValueStoreHandler:
    """
    This is the RPC class handler
    Attributes:
        - _data_store:

    """
    def __init__(self):
        self._data_store = 256 * [value_from_string("")] # array of useless values
    '''
    RPC calls:
        put_key     <- called by other replicas
        get_key     <- called by other replicas
        read        <- called by client
        write       <- called by client
    '''
    def read(self, key, level):
        print("read!")

        def most_recent_value(values):
            return sorted(values, key = lambda x: x.timestamp, reverse=True)[0]

        if READ_REPAIR:
            responses = read_all(key)
            response_count = len(responses)
            check_responses(response_count, level, self.read)
            # run potential read repair in the background
            responses.append(self._data_store[key])
            self.read_repair(responses)
            value = most_recent_value(responses[:level])

        #otherwise
        else:
            responses = read_n_replicas(key, level)
            response_count = len(responses)
            check_responses(response_count , level, self.read)
            value = most_recent_value(responses)

        return value
    
    def write(self, value, level):
        #how does this write without a key
        value.timestamp = time.time() # time stamp the value
        response_count = write_all(value)
        check_responses(response_count, level, self.write)

        self.local_write(value)

    def get_key(self, key, from_replica):
        self.process_incoming(from_replica)
        print("get key!")
        return self._data_store[key]

    def put_key(self, value, from_replica):
        self.process_incoming(from_replica)
        print("put_key!")

        self.local_write(value)
    '''
    Helper methods:
        local_write
        read_repair
        process_incoming
        check_responses
    '''

    @async
    @synchronize
    def read_repair(self, values):
        # sort in order of greatest to smallest timestamp
        values = sorted(values, key = lambda x: x.timestamp, reverse=True)

        content_list = [x.content for x in values]

        # if there is inconsistent data
        if content_list[1:] != content_list[:-1]:
            latest_value = values[0]
            write_all(latest_value) 
            self.local_write(latest_value)


    # handles incoming connections 
    def process_incoming(self, from_replica):
        connection = connection_dic[from_replica]
        if HINTED_HANDOFF and connection.is_failed():
            connection.send_hints(NODE_NAME)



    # write to your local data store
    # never write older data
    @synchronize
    def local_write(self, value):
       
        old_value = self._data_store[value.key]
        if old_value.timestamp < value.timestamp:
            write_log(value)
            self._data_store[value.key] = value


### Globals
PORT_NUM = -1
NODE_NAME = ""
NODE_FILE = ""
HINTED_HANDOFF = False
READ_REPAIR = False
connection_dic = {} # dictionary of Connection objects


### Helper functions



def setup_connections(node_list):
    """ setup the dictionary of Connection objects
            node_list: (string) 
    """
    global connection_dic
    for node in node_list:
        connection_dic[node.name] = connection_from_node(node)

#TODO make this async to some extent
def write_all(value):
    """ writes to all replicas
        writes a value to all known connections
        returns number of successful writes
    """
    response_count = len(connection_dic)
    for key in connection_dic:
        connection = connection_dic[key]

        with connection:
            try:
                connection.client.put_key(value, NODE_NAME)
            except Exception as ex:
                connection.mark_failed()
                if HINTED_HANDOFF:
                    connection.add_hint(value)
                response_count -= 1

    return response_count


#TODO write this
#think this needs to take name for file naming convention
def write_log(value):
    """ writes key to disk file
    """
    filename = "disk_" + NODE_NAME

    try:
        f = open(filename, "a+")
    except IOError:
        #wait this should create
        print "Not there"

    #cant use space here woops
    string = str(value.key) + "\n" + value.content + "\n" + str(value.timestamp) + "\n" + " " + "\n"
    f.write(string)

    f.close()

    pass

# replays data store from disk log
def replay_log(_data_store):
    #Might be wrong which node is current replica
    content = ""
    timestamp = -1.0
    key = -1
    print("Starting the server")
    filename = "disk_" + NODE_NAME
    try:
        #if this exists indicates recovery
        f = open(filename, "r")
        i = 0
        for line in f:
            #split using new delim
            if line == " \n":
                i = 0
            else:
                if i == 0:
                    key = int(line)
                elif i == 1:
                    #should I truncate the '\n'
                    content = line
                    content = content[:-1]
                elif i == 2:
                    timestamp = float(line)
                else:
                    print "Uh Oh"
                i += 1
                val = value_from_string(content, key)
                val.timestamp = float(timestamp)
                _data_store[val.key] = val
    except IOError:
        #file doesnt exist so no need to recover
        return    
 
# read from all replicas
def read_all(value_key):
    n = len(connection_dic)
    return read_n_replicas(value_key, n)

# reads from n replicas
def read_n_replicas(value_key, n):
    """ reads from all replicas
        returns a list of value objects
    """
    responses = []
    count = 0
    keys = connection_dic.keys()[:]
    shuffle(keys)
    for key in keys:
        # if we have enough responses, stop
        if count == n:
            break
        connection = connection_dic[key]

        with connection:
            try:
                response = connection.client.get_key(value_key, NODE_NAME)
                responses.append(response)
                count += 1
            except:
                connection.mark_failed()
    return responses
       
# make sure enough nodes responded
def check_responses(response_count, expected_count, function):
    if response_count < expected_count:
        raise SystemException("%s request could not reach enough nodes. %d node(s) responded"
                %(function.__name__, response_count))


# prints out a usage message
def usage(prog_name):
    msg = "Usage: %s node_name node_file {--hinted-handoff | --read-repair}" % (prog_name)
    halt(msg)


###MAIN
def main(args):
    global NODE_NAME, NODE_FILE, HINTED_HANDOFF, READ_REPAIR

    if len(args) != 4:
        usage(args[0])

    NODE_NAME = args[1]
    NODE_FILE = args[2]
    if args[3] == "--hinted-handoff": 
        HINTED_HANDOFF = True
    elif args[3] == "--read-repair": 
        READ_REPAIR = True
    else:
        halt("error, must give either --hinted-handoff or --read-repair")


    node_list = read_node_file(NODE_FILE)

    try:
        my_node = filter(lambda x: x.name == NODE_NAME, node_list)[0]
    except IndexError:
        halt("no such node name <%s> in file <%s>" %(NODE_NAME, NODE_FILE))

    #print(my_node)
    PORT_NUM = my_node.port

    handler = KeyValueStoreHandler()
    processor = KeyValueStore.Processor(handler)
    transport = TSocket.TServerSocket(port=PORT_NUM)
    tfactory = TTransport.TBufferedTransportFactory()
    pfactory = TBinaryProtocol.TBinaryProtocolFactory()

    #NOTE we are using a threaded server for now
    server = TServer.TThreadedServer(processor, transport, tfactory, pfactory)
    #server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)

    node_list.remove(my_node)
    setup_connections(node_list)

    #TODO do recovery if appropriate
    replay_log(handler._data_store)
    server.serve()

if __name__ == '__main__':
    main(sys.argv)

    
