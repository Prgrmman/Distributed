#!/usr/bin/env python2

#NOTES
'''
Key's must in the range 0-255. If they are not, throw an error
'''

import glob
import sys
import logging
import os
logging.basicConfig(filename = '/dev/null')

sys.path.append('gen-py')
sys.path.insert(0, glob.glob('/home/yaoliu/src_code/local/lib/lib/python2.7/site-packages')[0])

from store import KeyValueStore
from store.ttypes import SystemException, Value

from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer

from util import read_node_file, halt, connection_from_node, Connection


### Definitions


class KeyValueStoreHandler:
    """
    This is the RPC class handler
    Attributes:
        - _data_store:

    """
    
    def __init__(self):
        self._data_store = {}
        pass

    '''
    RPC calls:
        put_key
        get_key
    '''
    def read(self, key, level):
        pass
    
    def write(self, value, level):
        pass

    def get_key(self, key, from_replica):
        print("get key!")

    def put_key(self, value, from_replica):
        print("put_key!")


### Globals
PORT_NUM = -1
NODE_NAME = ""
NODE_FILE = ""
HINTED_HANDOFF = False
READ_REPAIR = False
connetion_dict = {} # dictionary of Connection objects


### Helper functions

def setup_connections(node_list):
    """ setup the dictionary of Connection objects
            node_list: (string) 
    """
    global connetion_dict
    for node in node_list:
        connetion_dict[node.name] = connection_from_node(node)

#TODO write this
def write_all():
    """ writes to all replicas
    """
    pass

#TODO write this
def write_log():
    """ writes key to disk file
    """
    pass

#TODO write this
def read_all():
    """ reads from all replicas
    """
    pass


# prints out a usage message
def usage(prog_name):
    msg = "Usage: %s node_name node_file {--hinted-handoff | --read-repair}" % (prog_name)
    halt(msg)

###MAIN
def main(args):
    global NODE_NAME, NODE_FILE

    if len(args) != 4:
        usage(args[0])

    NODE_NAME = args[1]
    NODE_FILE = args[2]
    if args[3] == "--hinted-handoff": 
        HINTED_HANDOFF = True
    elif args[3] == "--read-repair": 
        READ_REPAIR = True
    else:
        halt("error, must give either --hinted-handoff or --read-repair")


    node_list = read_node_file(NODE_FILE)

    try:
        my_node = filter(lambda x: x.name == NODE_NAME, node_list)[0]
    except IndexError:
        halt("no such node name <%s> in file <%s>" %(NODE_NAME, NODE_FILE))

    print(my_node)
    PORT_NUM = my_node.port

    handler = KeyValueStoreHandler()
    processor = KeyValueStore.Processor(handler)
    transport = TSocket.TServerSocket(port=PORT_NUM)
    tfactory = TTransport.TBufferedTransportFactory()
    pfactory = TBinaryProtocol.TBinaryProtocolFactory()

    #NOTE we are using a threaded server for now
    server = TServer.TThreadedServer(processor, transport, tfactory, pfactory)
    #server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)

    node_list.remove(my_node)
    setup_connections(node_list)

    #connection.client.ping("poop")
    print("Starting the server")
    server.serve()

if __name__ == '__main__':
    main(sys.argv)

    
